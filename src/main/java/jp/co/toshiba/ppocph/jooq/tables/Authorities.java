/*
 * This file is generated by jOOQ.
 */
package jp.co.toshiba.ppocph.jooq.tables;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import jp.co.toshiba.ppocph.jooq.Keys;
import jp.co.toshiba.ppocph.jooq.Public;
import jp.co.toshiba.ppocph.jooq.tables.records.AuthoritiesRecord;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Authorities extends TableImpl<AuthoritiesRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>public.authorities</code>
	 */
	public static final Authorities AUTHORITIES = new Authorities();

	/**
	 * The column <code>public.authorities.id</code>.
	 */
	public final TableField<AuthoritiesRecord, Long> ID = Authorities.createField(DSL.name("id"),
			SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>public.authorities.name</code>.
	 */
	public final TableField<AuthoritiesRecord, String> NAME = Authorities.createField(DSL.name("name"),
			SQLDataType.VARCHAR(50).nullable(false), this, "");

	/**
	 * The column <code>public.authorities.title</code>.
	 */
	public final TableField<AuthoritiesRecord, String> TITLE = Authorities.createField(DSL.name("title"),
			SQLDataType.VARCHAR(50).nullable(false), this, "");

	/**
	 * The column <code>public.authorities.category_id</code>.
	 */
	public final TableField<AuthoritiesRecord, Long> CATEGORY_ID = Authorities.createField(DSL.name("category_id"),
			SQLDataType.BIGINT, this, "");

	/**
	 * Create a <code>public.authorities</code> table reference
	 */
	public Authorities() {
		this(DSL.name("authorities"), null);
	}

	/**
	 * Create an aliased <code>public.authorities</code> table reference
	 */
	public Authorities(final Name alias) {
		this(alias, AUTHORITIES);
	}

	private Authorities(final Name alias, final Table<AuthoritiesRecord> aliased) {
		this(alias, aliased, null);
	}

	private Authorities(final Name alias, final Table<AuthoritiesRecord> aliased, final Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>public.authorities</code> table reference
	 */
	public Authorities(final String alias) {
		this(DSL.name(alias), AUTHORITIES);
	}

	public <O extends Record> Authorities(final Table<O> child, final ForeignKey<O, AuthoritiesRecord> key) {
		super(child, key, AUTHORITIES);
	}

	@Override
	public Authorities as(final Name alias) {
		return new Authorities(alias, this);
	}

	@Override
	public Authorities as(final String alias) {
		return new Authorities(DSL.name(alias), this);
	}

	@Override
	public Authorities as(final Table<?> alias) {
		return new Authorities(alias.getQualifiedName(), this);
	}

	@Override
	public Row4<Long, String, String, Long> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	@Override
	public UniqueKey<AuthoritiesRecord> getPrimaryKey() {
		return Keys.AUTH_PKEY;
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AuthoritiesRecord> getRecordType() {
		return AuthoritiesRecord.class;
	}

	@Override
	public Schema getSchema() {
		return this.aliased() ? null : Public.PUBLIC;
	}

	@Override
	public List<UniqueKey<AuthoritiesRecord>> getUniqueKeys() {
		return Arrays.asList(Keys.NUNIQUES, Keys.TUNIQUES);
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
	 */
	public <U> SelectField<U> mapping(final Class<U> toType,
			final Function4<? super Long, ? super String, ? super String, ? super Long, ? extends U> from) {
		return this.convertFrom(toType, Records.mapping(from));
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
	 */
	public <U> SelectField<U> mapping(
			final Function4<? super Long, ? super String, ? super String, ? super Long, ? extends U> from) {
		return this.convertFrom(Records.mapping(from));
	}

	// -------------------------------------------------------------------------
	// Row4 type methods
	// -------------------------------------------------------------------------

	/**
	 * Rename this table
	 */
	@Override
	public Authorities rename(final Name name) {
		return new Authorities(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Authorities rename(final String name) {
		return new Authorities(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Authorities rename(final Table<?> name) {
		return new Authorities(name.getQualifiedName(), null);
	}
}
